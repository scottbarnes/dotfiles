" utf-8
set encoding=utf-8

set history=200
set nocompatible
set number
filetype plugin on
"runtime macros/matchit.vim " jump between more pairs with %
packadd! matchit " jump between more pairs with %
set hls " highlight search matches

" automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-sensible'
Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'ycm-core/YouCompleteMe'
Plug 'nvie/vim-flake8'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
" Pair mappings; e.g., ]q and [q for cnext and cprevious, respectively.
Plug 'tpope/vim-unimpaired'
" Vim and git
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
" ack replacement; pacman -S the_silver_searcher
Plug 'ggreer/the_silver_searcher'
" use */# to search for visual selection.
Plug 'nelstrom/vim-visual-star-search'
" find files semantically
Plug 'tpope/vim-projectionist'
Plug 'jiangmiao/auto-pairs'		" auto pair brackets, parens, and quotes
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'			" fzf
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " On-demand loading with nerdtree
" typescript
Plug 'pangloss/vim-javascript'		" JavaScript support
Plug 'leafgarland/typescript-vim'	" TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'		" JS and JSX syntax
Plug 'jparise/vim-graphql'		" GraphQL syntax
Plug 'neoclide/coc.nvim' , { 'branch' : 'release' } " Conquerer of Completion
Plug 'dense-analysis/ale'               " Linting.
" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" Autoindent for python
Plug 'vim-scripts/indentpython.vim'

call plug#end()

" CoC extension for tsserver
let g:coc_global_extensions = [ 'coc-tsserver' ]
" https://github.com/fannheyward/coc-styled-components
" CocInstall coc-styled-components
" CocInstall coc-snippets

set laststatus=2
if !has('gui_running')
  set t_Co=256
endif

" Remaps
" Redraw the screen and temporarily disable search highlighting
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
" Remap .& to always do :&&
nnoremap & :&&<CR>
xnoremap & :&&<CR>
" Build ctags index recursively
nnoremap <f5> :!ctags -R<CR>
" Make FZF easier to get to
nnoremap <C-p> :<C-u>FZF<CR>

" CoC remaps
""" CoC colors
" The suggestions menu: https://stackoverflow.com/questions/64180454/how-to-change-coc-nvim-floating-window-colors
hi CocErrorFloat ctermfg=Black
"" From the CoC FAQ
" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Fix auto-indentation for YAML files
augroup yaml_fix
  autocmd!
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab indentkeys-=0# indentkeys-=<:>
augroup END

"" ALE
" For JavaScript and TypeScript files, use `eslint` (and only eslint)
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\ }

" ALE mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

"" Formatting
" Python
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \ set softtabstop=4
    \ set shiftwidth=4
    \ set textwidth=120
    \ set expandtab
    \ set autoindent
    \ set fileformat=unix

" JS/HTML/CSS
au BufNewFile,BufRead *.js, *.html, *.css
    \ set tabstop=2
    \ set softtabstop=2
    \ set shiftwidth=2

" Flag extra whitespace
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

