" utf-8
set encoding=utf-8

set history=200
set nocompatible
set number
filetype plugin on
"runtime macros/matchit.vim " jump between more pairs with %
packadd! matchit " jump between more pairs with %
set hls " highlight search matches

" automatic installation of vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-sensible'
Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'ycm-core/YouCompleteMe'
Plug 'nvie/vim-flake8'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
" Pair mappings; e.g., ]q and [q for cnext and cprevious, respectively.
Plug 'tpope/vim-unimpaired'
" Vim and git
" Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
" ack replacement; pacman -S the_silver_searcher
Plug 'ggreer/the_silver_searcher'
" use */# to search for visual selection.
Plug 'nelstrom/vim-visual-star-search'
" find files semantically
Plug 'tpope/vim-projectionist'
Plug 'jiangmiao/auto-pairs'		" auto pair brackets, parens, and quotes
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'			" fzf
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' } " On-demand loading with nerdtree
" typescript
Plug 'pangloss/vim-javascript'		" JavaScript support
" Plug 'leafgarland/typescript-vim'	" TypeScript syntax
Plug 'maxmellon/vim-jsx-pretty'		" JS and JSX syntax
Plug 'jparise/vim-graphql'		" GraphQL syntax
" Plug 'neoclide/coc.nvim' , { 'branch' : 'release' } " Conquerer of Completion
Plug 'dense-analysis/ale'               " Linting.
" Go
" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" Autoindent for python
Plug 'vim-scripts/indentpython.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'neovim/nvim-lspconfig'
Plug 'glepnir/lspsaga.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'hrsh7th/nvim-compe'  " https://github.com/hrsh7th/nvim-compe
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'nvim-lua/lsp-status.nvim'
Plug 'nvim-lua/diagnostic-nvim'
Plug 'airblade/vim-gitgutter'
Plug 'sbdchd/neoformat'
Plug 'phaazon/hop.nvim'

call plug#end()

" CoC extension for tsserver
" let g:coc_global_extensions = [ 'coc-tsserver' ]
" https://github.com/fannheyward/coc-styled-components
" CocInstall coc-styled-components
" CocInstall coc-snippets

set laststatus=2
if !has('gui_running')
  set t_Co=256
endif

" Remaps
" Redraw the screen and temporarily disable search highlighting
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>
" Remap .& to always do :&&
nnoremap & :&&<CR>
xnoremap & :&&<CR>
" Build ctags index recursively
nnoremap <f5> :!ctags -R<CR>
" Make FZF easier to get to
nnoremap <C-p> :<C-u>FZF<CR>

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" hop.nvim
" cl is equivalent to s.
lua require'hop'.setup {keys = 'aoeuidhtspyfgcrlqjkxbbmwvz'}
map s <cmd>HopChar1<CR>
omap s v<cmd>HopChar1<CR>

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Briefly highly text on yank
au TextYankPost * lua vim.highlight.on_yank {higroup="IncSearch", timeout=150, on_visual=true}

" Fix auto-indentation for YAML files
augroup yaml_fix
  autocmd!
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab indentkeys-=0# indentkeys-=<:>
augroup END

" Use spaces as tabs in Go
au BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
autocmd BufWritePre *.go lua goimports(1000)

" Add proper PEP8 indentation
au BufNewFile,BufRead *.py set tabstop=4
au BufNewFile,BufRead *.py set softtabstop=4
au BufNewFile,BufRead *.py set shiftwidth=4
au BufNewFile,BufRead *.py set textwidth=79
au BufNewFile,BufRead *.py set expandtab
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix

" Full stack development
au BufNewFile,BufRead *.js,*.html,*.css set tabstop=2
au BufNewFile,BufRead *.js,*.html,*.css set softtabstop=2
au BufNewFile,BufRead *.js,*.html,*.css set shiftwidth=2
au BufNewFile,BufRead *.js,*.html,*.css set expandtab
au BufNewFile,BufRead *.js,*.html,*.css set autoindent

"" ALE
" For JavaScript and TypeScript files, use `eslint` (and only eslint)
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['eslint'],
\ }

" ALE mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)

" Flag extra whitespace
" au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" theme
colorscheme everforest

" telescope
" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" nvim-compe
set completeopt=menuone,noselect
let g:compe = {}
let g:compe.enabled = v:true
let g:compe.autocomplete = v:true
let g:compe.debug = v:false
let g:compe.min_length = 1
let g:compe.preselect = 'enable'
let g:compe.throttle_time = 80
let g:compe.source_timeout = 200
let g:compe.resolve_timeout = 800
let g:compe.incomplete_delay = 400
let g:compe.max_abbr_width = 100
let g:compe.max_kind_width = 100
let g:compe.max_menu_width = 100
let g:compe.documentation = v:true

let g:compe.source = {}
let g:compe.source.path = v:true
let g:compe.source.buffer = v:true
let g:compe.source.calc = v:true
let g:compe.source.nvim_lsp = v:true
let g:compe.source.nvim_lua = v:true
let g:compe.source.vsnip = v:true
let g:compe.source.ultisnips = v:true
let g:compe.source.luasnip = v:true
let g:compe.source.emoji = v:true

" vim-go
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_auto_type_info = 1

""""""""
" From
" https://dev.to/casonadams/neovim-and-its-built-in-language-server-protocol-3j8g
"" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

"------------------------------------------------
" Settings START
filetype plugin on
set updatetime=300
set completeopt=menuone
set completeopt+=noinsert
set completeopt-=preview
set shortmess+=c
" Settings END
"------------------------------------------------

"------------------------------------------------
" Status Line START
set statusline=%<%f\ %h%m%r
set statusline+=%=%-10.60{LspStatus()}\ %-.(%l,%c%V%)\ %P

function! LspStatus() abort
  if luaeval('#vim.lsp.buf_get_clients() > 0')
    return luaeval("require('lsp-status').status()")
  endif

  return ''
endfunction
" Status Line END
"------------------------------------------------
