-- local M = {}

-- M.config = function()

--   local status_ok, dap = pcall(require, "dap")
--   if not status_ok then
--     return
--   end

--   dap.adapters.python = {
--     type = 'executable';
--     command = 'python';
--     args = { '-m', 'debugpy.adapter' };
--   }

--   dap.configurations.python = dap.configurations.python or {}
--   table.insert(dap.configurations.python, {
--     type = "python",
--     request = "launch",
--     name = "launch with options",
--     program = "${file}",
--     python = function() end,
--     -- start new
--     pythonPath = function()
--       return '/usr/bin/python'
--     end,
--     -- end new
--     -- pythonPath = function()
--     --   local path
--     --   for _, server in pairs(vim.lsp.buf_get_clients()) do
--     --     if server.name == "pyright" or server.name == "pylance" then
--     --       path = vim.tbl_get(server, "config", "settings", "python", "pythonPath")
--     --       break
--     --     end
--     --   end
--     --   path = vim.fn.input("Python path: ", path or "", "file")
--     --   return path ~= "" and vim.fn.expand(path) or nil
--     -- end,
--     -- args = function()
--     --   local args = {}
--     --   local i = 1
--     --   while true do
--     --     local arg = vim.fn.input("Argument [" .. i .. "]: ")
--     --     if arg == "" then
--     --       break
--     --     end
--     --     args[i] = arg
--     --     i = i + 1
--     --   end
--     --   return args
--     -- end,
--     -- justMyCode = function()
--     --   local yn = vim.fn.input "justMyCode? [y/n]: "
--     --   if yn == "y" then
--     --     return true
--     --   end
--     --   return false
--     -- end,
--     -- stopOnEntry = function()
--     --   local yn = vim.fn.input "stopOnEntry? [y/n]: "
--     --   if yn == "y" then
--     --     return true
--     --   end
--     --   return false
--     -- end,
--     console = "integratedTerminal",
--   })

--   --   python = function() end,
--   --   pythonPath = function()
--   --     local path
--   --     for _, server in pairs(vim.lsp.buf_get_clients()) do
--   --       if server.name == "pyright" or server.name == "pylance" then
--   --         path = vim.tbl_get(server, "config", "settings", "python", "pythonPath")
--   --         break
--   --       end
--   --     end
--   --     path = vim.fn.input("Python path: ", path or "", "file")
--   --     return path ~= "" and vim.fn.expand(path) or nil
--   --   end,
--   --   args = function()
--   --     local args = {}
--   --     local i = 1
--   --     while true do
--   --       local arg = vim.fn.input("Argument [" .. i .. "]: ")
--   --       if arg == "" then
--   --         break
--   --       end
--   --       args[i] = arg
--   --       i = i + 1
--   --     end
--   --     return args
--   --   end,
--   --   justMyCode = function()
--   --     local yn = vim.fn.input "justMyCode? [y/n]: "
--   --     if yn == "y" then
--   --       return true
--   --     end
--   --     return false
--   --   end,
--   --   stopOnEntry = function()
--   --     local yn = vim.fn.input "stopOnEntry? [y/n]: "
--   --     if yn == "y" then
--   --       return true
--   --     end
--   --     return false
--   --   end,
--   --   console = "integratedTerminal",
--   -- })
--   -- lvim.builtin.dap.on_config_done = function(_)
--   --   lvim.builtin.which_key.mappings["d"].name = "ï†ˆ Debug"
--   -- end
-- end
-- return M
